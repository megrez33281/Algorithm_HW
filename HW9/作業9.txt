NPC問題：若問題Ｘ屬於NP問題，且屬於NP-hard問題，則問題Ｘ為NPC問題
NP-hard問題：Ｘ為NP-hard問題，若且唯若所有NP問題都可以以多項式時間轉變為問題X
NP問題：一問題可以用NP(nondeterministic polynomial，非確定性多項式演算法)演算法解決
P問題：一問題可以以確定性多項式時間演算法解決

A~F 以下的敘述是對還是錯，並解釋對或錯的原因:

A：若我們能證明任何一個NPC問題的最壞狀況問題下界(worst case problem lower bound)是指數函數量級，則我們已經證明 NP不等於P。

答：正確，若任何一個NPC問題的最壞狀況問題下界(worst case problem lower bound)是指數函數量級，即不存在NPC問題可以以確定性多項式時間演算法解決，又NPC問題屬於NP問題，即NP不等於P

B：若我們能證明任何一個 NPC問題的最壞狀況問題下界(worst case problem lower bound)是多項式函數量級，則我們已經證明 NP等於P。

答：錯誤，最壞狀況問題下界(worst case problem lower bound)包含非確定性演算法，需要有NPC問題可以用確定性多項式時間演算法解決方可證明NP等於P

C：若我們能直找到一個確定性演算法，在最差狀況下以多項式時間複雜度解決一個NPC問題，則我們已經證明NP等於P。

答：正確，因為NPC問題的特性為任何NP問題皆可用多項式時間轉成該NPC問題，故當一NPC問題能以確定性演算法在最差狀況下以多項式時間複雜度解決，代表所有NP問題都能以確定性演算法在最差狀況下以多項式時間複雜度解決，即NP等於P

D：人們已經證明: 沒有任何確定演算法(deterministic algorithm)可以在最差狀況(worst case)下，以多項式時間複雜度解決NPC問題。

答：錯誤，雖然目前找不到任何NPC問題可以確定性演算法在最差狀況為多項式時間複雜度解決，但同樣無人可證明不存在這樣的NPC問題

E：人們已經證明: 沒有任何確定演算法(deterministic algorithm)可以在最差狀況(worst case)下，以多項式時間複雜度解決NP-hard問題。

答：錯誤，NPC問題亦為NP-hard問題的一部份，由於尚無法證明沒有任何確定性演算法可以在最差情況下以多項式時間複雜度解決NPC問題，自然無法證明沒有任何確定演算法(deterministic algorithm)可以在最差狀況(worst case)下，以多項式時間複雜度解決NP-hard問題

F：任何NPC問題可以polynomially reduces to另一個NPC問題

答：正確，NPC問題屬於NP問題，因此依照NPC問題任何NP問題可以polynomially reduces to一個NPC問題的特性，任何NPC問題(視為一個NP問題)可以polynomially reduces to另一個NPC問題

G：證明支配集問題(dominating set problem)為NP問題。
支配集(Dominating Set(k))：給定一個圖G=(V, E) 和一個整數 k，G 是否存在一個大小k的支配集?
支配集：一個圖 G=(V, E)中的支配集為一集合D是V的子集合，使得V中的每個點v，v是在D內或是與D中至少一個點相鄰。

答：藉由以NP演算法解決該問題來證明：

Algorithm DominatingSet(G,k)
Input：Graph G=(V,E), V={v1,v2.....vn},整數k
Output：Success 存在大小小於等於k的支配集
        Faliure 不存在
1. D <- ∅
2. for i <- 1 to k do  //guessing
3.   D <- D ∪ choice(V) 
4. for i <- 1 to n do //checking
5.   if(V[i] ∉ D) and (u ∉ D, ∀u相鄰V[i]) do
6.     return Failure
7. return Success

時間複雜度分析：
  guessing的時間複雜度為O(k)，checking的時間複雜度為：檢查V中的所有點，可將D想像為一個狀態，當一個點v屬於D時，其D狀態為1，在此狀況下檢查V[i] 是否屬於D只需O(1)的時間，檢查與V[i]相鄰的點是否屬於D也只需1*(n-1) = O(n)的時間(假設所有點皆為V[i]的鄰邊)，故checking的時間複雜度為O(n^2)，故支配集問題(dominating set problem)為NP問題。

H. 證明點覆蓋問題(vertex cover problem)為NP問題。
點覆蓋問題(Vertex Cover(k))：給定一個圖G=(V, E) 和一個整數k，圖G是否存在一個點覆蓋集合其大小<=k?
G=(V, E)中的一個點覆蓋(vertex cover)是一集合 V'屬於V使得在 E 中的每個邊都與V'中的某一點v相連，也就是說，在E中的每個邊都至少有一個端點在V'中。

答：藉由以NP演算法解決該問題來證明：

Algorithm VertexCover(G,k)
Input：Graph G=(V,E), V={v1,v2.....vn}, E={e1,e2......em},整數k
Output：Success 存在小於等於k的V'，Faliure 不存在
1. V' <- ∅
2. for i <- 1 to k do  //guessing
3.   V' <- V' ∪ choice(V) 
4. for each edge ∈ E do //checking
5.   if(u ∉ V' and v ∉ V', u,v為與edge的兩端點) do
6.     return Failure
7. return Success
時間複雜度分析：
  guessing的時間複雜度為O(k)，checking的時間複雜度為：檢查E中的所有邊，檢查兩端點是否屬於V'，每次檢查需O(1)故checking的時間複雜度為O(m)，故點覆蓋問題(vertex cover problem)為NP問題。

I. 證明集團問題(clique problem)為NP問題。
集團問題(k)(CLIQUE(k))： G=(V,E) 是否包含一個集團(clique)，其大小>=k?
在圖中的集團(clique)是一個多點的集合，其集合必須滿足當中的任意點對之間存在邊將兩者相連。

答：藉由以NP演算法解決該問題來證明：

Algorithm CliQue(G,k)
Input：Graph G=(V,E), V={v1,v2.....vn}, E={e1,e2......em},整數k
Output：Success G包含一個集團(clique)，其大小>=k，Faliure 不包含
1. V' <- ∅
2. for i <- 1 to k do  //guessing
3.   V' <- V' ∪ choice(V) 
4. for each v ∈ V' do //checking
5.   for each u ∈ V' and u != v do
6.     if u and v 不相鄰 do
7.       return Failure
8. return Success
時間複雜度分析：
  guessing的時間複雜度為O(k)，checking的時間複雜度為：檢查V'中的所有點之間是否都有邊，時間複雜度為O(n^2)故集團問題(clique problem)為NP問題。

J. 證明著色問題(chromatic coloring problem)為NP問題
著色(Chromatic Coloring)問題: 給定一個圖 G=(V, E) 和一個整數k， G是否存在k顏色著色
著色定義：圖G=(V, E)中的k顏色為有k種顏色，可將每個點染色，使相鄰邊為不同色

答：藉由以NP演算法解決該問題來證明：

Algorithm ChromaticColoring(G,k)
Input：Graph G=(V,E), V={v1,v2.....vn}, E={e1,e2......em},整數k
Output：Success 存在k顏色著色，Faliure 不存在
1. for i <- 1 to n do  //guessing
2.   Vcolor[i] <- choice(k) 
3. for each edge ∈ E do //checking
4.     if Vcolor[u] == Vcolor[v] do //兩端點顏色相同
5.       return Failure
6. return Success
時間複雜度分析：
  guessing的時間複雜度為O(n)，checking的時間複雜度為：檢查E中的所有邊之端點顏色是否不同，時間複雜度為O(m)故著色問題(chromatic coloring problem)為NP問題

K. 證明0/1 背包問題(0/1 knapsack problem)為NP問題
給一個 M (重量限制) 和 P, 是否有一個利潤大於P的解決方案?

答：藉由以NP演算法解決該問題來證明：
Algorithm 0/1Knapsack(M,P)
Input：整數M、P、物件 I = {i0,i1,.....in}
Output：Success 有一個利潤大於P的解決方案，Faliure 沒有
1. for i <- 1 to n do  //guessing
2.   I[i].choice <- choice(1) //表達第i樣物品裝或不裝 
3. value <- 0
4. for i <- 1 to n do  //checking
5.     if I[i].choice == 1 do //該物品有裝
6.        value <- value + I[i].value
7.        M <- M - I[i].weight
8. if value <= P or M < 0 
9.    return Failure
10. else
11.   return Success
時間複雜度分析：
  guessing的時間複雜度為O(n)，checking的時間複雜度為：檢利潤是否達到P且重量不超過M，時間複雜度為O(n)，故0/1 背包問題(0/1 knapsack problem)為NP問題。

L. 證明3-滿足問題(3-SAT problem)為NP問題。
3SAT問題：若一布林代數式可以這樣表式：(x1 v x2 v x3 ) ^ (x4 v !x5 v x6) ^ ... ^(x2 v !x4 v x6)，其中 v是or運算，^是and運算。這種布林代數式叫 3-CNF (3- conjunctive normal form)，也就是從有限的變數集合中，將各變數以三個為一組or在一起，然後以and將各組變數連接在一起。如何從3-CNF找出各變數的值，使得3-CNF會等於true。

答：藉由以NP演算法解決該問題來證明：
   1)藉由Guessing猜測每一個變數的值 => 時間複雜度為O(n)
   2)計算出bollean值是否為ture(true代表Success，否則即為Failure)，時間複雜度亦不超過O(n)
   故3-滿足問題(3-SAT problem)為NP問題

M. 證明最大割問題(Max cut problem)為NP問題(?)
給定一張圖，求一種分割方法，將所有頂點（Vertex）分割成兩群，同時使得被切斷的邊（Edge）數量最大。

答：藉由以NP演算法解決該問題來證明：

Algorithm MaxCut(G,k)
Input：Graph G=(V,E), V={v1,v2.....vn}, E={e1,e2......em},整數k
Output：Success 可使被切斷的邊>=k，Faliure 不可
1. for i <- 1 to m do  //guessing
2.   E[i] <- choice(1) 
3. sum <- 0
4. for each edge ∈ E do //checking
5.     if E[i] == 1 do //兩端點顏色相同
6.        sum <- sum +1
7. if sum < k or 非將V分成兩部分 do
8.   return Failure
9. return Success
時間複雜度分析：
  Guessing的時間複雜度為O(n)，checking的時間複雜度為：檢查切斷的邊是否大於等於K以及是否可將點分為兩部分，時間複雜度約為O(m)，故最大割問題(Max cut problem)為NP問題

N. 證明史坦惹樹問題(Steiner tree problem)為NP問題
答：藉由以NP演算法解決該問題來證明：
   (1)藉由choice生成最小史坦納樹
   (2)藉由遍歷計算各邊權重和是否為最小值，由於為遍歷，可在多項式時間完成。
   故史坦惹樹問題(Steiner tree problem)為NP問題

O. 證明劃分問題(partition problem)為NP問題。
給定: 一個正整數的集合S 欲找到:是否存在著一種分割(partition)，將S分成S1和S2，使得S1 內元素的總和等於S2元素總和
e.g. S={1, 7, 10, 9, 5, 8, 3, 13}
◼ S1={1, 10, 9, 8}
◼ S2={7, 5, 3, 13}
答：藉由以NP演算法解決該問題來證明：

Algorithm Partition(G)
Input：長度為n的數列S
Output：Success 存在分割將S分成S1和S2使得S1內元素的總和等於S2內元素總和，Faliure 不存在
1. for i <- 1 to n do  //guessing
2.   P[i] <- choice(1) //0,1個代表一邊
3. sum1 <- 0, sum2 <- 0
4. for i <- 1 to n do //checking
5.     if P[i] == 0 do //兩端點顏色相同
6.        sum1 <- sum1 + S[i]
7.     else
8.        sum2 <- sum2 + S[i] 
9. if sum1 != sum2 do
10.   return Failure
11.return Success
時間複雜度分析：
  Guessing的時間複雜度為O(n)，checking的時間複雜度為：遍歷數列S，時間複雜度為O(n)，故劃分問題(partition problem)為NP問題。

P. 證明擊中集合問題(hitting set problem)為NP問題
在碰撞集(HITTING SET)問題中，給定一組集合{S1, S2, S3, …, Sn}和預算b，我們希望求一個與所有Si相交且規模不超過b的集合H（H與所有Si相交不為空）。
答：藉由以NP演算法解決該問題來證明：
   (1)藉由choice來生成集合H
   (2)驗證H是否符合規範：檢查H大小是否小於等於B以及檢查Si與H相交不為空，時間複雜度為多項式時間複雜度

Q. 證明三維匹配問題(3-dimensional matching problem)為NP問題。
三維匹配問題（3DM）是六個經典NP完全問題之一，是經典的「婚姻問題」的推廣，「婚姻問題」的提法是：有幾個未婚男子和幾個未婚女子以及一張列出雙方都表示願意結合在一起的一對對男子和女子的表格，問是否能安排幾對婚姻使得每個人都與自己願意接受的配偶結婚並且不出現重婚？
答：藉由以NP演算法解決該問題來證明：
   (1)藉由choice來生成配對
   (2)檢查背對中的男女是否皆願意，且不重複
   由於時間複雜度為多項式時間複雜度，故三維匹配問題(3-dimensional matching problem)為NP問題。

R. 證明Convex Hull問題的問題下界為Omega(n log n)
   由於若解決凸包問題，亦可解決排序問題，代表排序問題可以reduce到凸包問題，可以用多項式時間將排序問題轉到凸包問題解決後再轉回排序問題的答案，故凸包排序的下界會等於排序問題的下界即Omega(nlogn)
